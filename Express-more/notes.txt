FOR AUTOMATIC SERVER RESTART
add 
"scripts": {
    "start": "nodemon app.js"
},

in the package.json and type -> npm start (to directly open app.js)
-> so that server restarts on its own everytime we save any changes

or just add "nodemon"
and type npm start <filename>


app.use(express.static('public')); 
// middleware to load static files like css and js
// We're telling Express that for every incoming request, it should check if
// it's a request to a file that can be found here in this public folder.
// And if it is, then the file will be returned as a response.
// If it's not, the request will be forwarded to our other routes.
// And if there, we also have no route that handles the request, the request will fail.


const fs = require('fs'); // package for file system
const path = require('path'); // package to construct path

// to parse incoming request data
app.use(express.urlencoded({extended: false})); // middleware function to see if the req has any data and parse that

const fileData = fs.readFileSync(filePath); //this will be normal text not a JS obj or array
const existingUsers = JSON.parse(fileData); // parsing the normal text to JS object

fs.writeFileSync(filePath, JSON.stringify(existingUsers)); // cannot write existingUsers. Need to write normal text :: stringify

// templating engine
// v this is to let expess know where it will find our template files, file path for views/templates
app.set("views", path.join(__dirname, "views"));
// view option -> tells express that we want to use special engine, ejs -> name of the engine
app.set("view engine", "ejs");

by using this we dont need to res.send(filePath)
we can just use res.render(fileName) -> for parsing an html file

in .ejs files, we can use 
<% code %>
to use any js code inside the ejs(html) file

<%= varName %> -> is used to insert single value

to use variables from backend in the html(ejs) file
we got to add those variables in the req.render() function as parameters
eg: res.render('restaurants', {numOfRestaurants: storedRestaurants.length, restaurants: storedRestaurants});

To break our big html files to smaller more-managable files
<%- include('filepath', {var: data}) %>
( {var: data} is optional and filepath without extension) 
<%- %> loads and parses the given files like html files only

however <%= %> parses like normal text => acts as a security mechanism as well. prevents from scripting

const uuid = require('uuid'); // gives a method to randomly generate unique id


// middleware to catch all the requests that are not handled above
// it will kick in when we have a req that is not handled by any other routes
app.use(function(req, res){
    res.render('404');
});
// added just before app.listen(port); statement

// added after the above route ^
// special error handling function
// to handle server side errors
app.use(function(error, req, res, next){
    res.render('500');
});

// status codes
// 200 - req parsed successfully, a resp can be generated and sent 
// 404 - client side error. requested resource/link was not found.
// 401 - client side error. client(user) is not authorized to access the requested resource/link
// 500 - server-side error. req was valid.

// server.listen(3000);
// amazon.com => send a req to amazon.com
// common port to send unencrypted req
// amazon.com:80
// :443 uses ssl

res.status(404).render('404'); // to let the browser know that its an error status
